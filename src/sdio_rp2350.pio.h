// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// -------- //
// sdio_cmd //
// -------- //

#define sdio_cmd_wrap_target 0
#define sdio_cmd_wrap 16
#define sdio_cmd_pio_version 0

#define sdio_cmd_offset_resp_done 16u

static const uint16_t sdio_cmd_program_instructions[] = {
            //     .wrap_target
    0xb2e3, //  0: mov    osr, null       side 1 [2] 
    0xa24d, //  1: mov    y, !status      side 0 [2] 
    0x1261, //  2: jmp    !y, 1           side 1 [2] 
    0x6260, //  3: out    null, 32        side 0 [2] 
    0x7228, //  4: out    x, 8            side 1 [2] 
    0xe201, //  5: set    pins, 1         side 0 [2] 
    0xf281, //  6: set    pindirs, 1      side 1 [2] 
    0x6201, //  7: out    pins, 1         side 0 [2] 
    0x1247, //  8: jmp    x--, 7          side 1 [2] 
    0xe080, //  9: set    pindirs, 0      side 0     
    0x6128, // 10: out    x, 8            side 0 [1] 
    0x1230, // 11: jmp    !x, 16          side 1 [2] 
    0x02cb, // 12: jmp    pin, 11         side 0 [2] 
    0x5261, // 13: in     null, 1         side 1 [2] 
    0x4201, // 14: in     pins, 1         side 0 [2] 
    0x124e, // 15: jmp    x--, 14         side 1 [2] 
    0x8220, // 16: push   block           side 0 [2] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program sdio_cmd_program = {
    .instructions = sdio_cmd_program_instructions,
    .length = 17,
    .origin = -1,
    .pio_version = sdio_cmd_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config sdio_cmd_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + sdio_cmd_wrap_target, offset + sdio_cmd_wrap);
    sm_config_set_in_pin_count(&c, 32);
    sm_config_set_in_shift(&c, 0, 1, 32);
    sm_config_set_out_pin_count(&c, 1);
    sm_config_set_out_shift(&c, 0, 1, 32);
    sm_config_set_set_pin_count(&c, 1);
    sm_config_set_sideset(&c, 1, false, false);
    sm_config_set_mov_status(&c, STATUS_TX_LESSTHAN, 2);
    return c;
}
#endif

// ----------- //
// sdio_cmd_hs //
// ----------- //

#define sdio_cmd_hs_wrap_target 0
#define sdio_cmd_hs_wrap 16
#define sdio_cmd_hs_pio_version 0

#define sdio_cmd_hs_offset_resp_done 16u

static const uint16_t sdio_cmd_hs_program_instructions[] = {
            //     .wrap_target
    0xb0e3, //  0: mov    osr, null       side 1     
    0xa24d, //  1: mov    y, !status      side 0 [2] 
    0x1261, //  2: jmp    !y, 1           side 1 [2] 
    0x6260, //  3: out    null, 32        side 0 [2] 
    0x7228, //  4: out    x, 8            side 1 [2] 
    0xe201, //  5: set    pins, 1         side 0 [2] 
    0xf281, //  6: set    pindirs, 1      side 1 [2] 
    0x6201, //  7: out    pins, 1         side 0 [2] 
    0x1247, //  8: jmp    x--, 7          side 1 [2] 
    0xe280, //  9: set    pindirs, 0      side 0 [2] 
    0x7228, // 10: out    x, 8            side 1 [2] 
    0x0230, // 11: jmp    !x, 16          side 0 [2] 
    0x12cb, // 12: jmp    pin, 11         side 1 [2] 
    0x4261, // 13: in     null, 1         side 0 [2] 
    0x5201, // 14: in     pins, 1         side 1 [2] 
    0x024e, // 15: jmp    x--, 14         side 0 [2] 
    0x8120, // 16: push   block           side 0 [1] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program sdio_cmd_hs_program = {
    .instructions = sdio_cmd_hs_program_instructions,
    .length = 17,
    .origin = -1,
    .pio_version = sdio_cmd_hs_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config sdio_cmd_hs_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + sdio_cmd_hs_wrap_target, offset + sdio_cmd_hs_wrap);
    sm_config_set_in_pin_count(&c, 32);
    sm_config_set_in_shift(&c, 0, 1, 32);
    sm_config_set_out_pin_count(&c, 1);
    sm_config_set_out_shift(&c, 0, 1, 32);
    sm_config_set_set_pin_count(&c, 1);
    sm_config_set_sideset(&c, 1, false, false);
    sm_config_set_mov_status(&c, STATUS_TX_LESSTHAN, 2);
    return c;
}
#endif

// ------------ //
// sdio_data_rx //
// ------------ //

#define sdio_data_rx_wrap_target 0
#define sdio_data_rx_wrap 5
#define sdio_data_rx_pio_version 0

static const uint16_t sdio_data_rx_program_instructions[] = {
            //     .wrap_target
    0xa222, //  0: mov    x, y            side 0 [2] 
    0xb242, //  1: nop                    side 1 [2] 
    0x02c1, //  2: jmp    pin, 1          side 0 [2] 
    0xb242, //  3: nop                    side 1 [2] 
    0x4204, //  4: in     pins, 4         side 0 [2] 
    0x1244, //  5: jmp    x--, 4          side 1 [2] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program sdio_data_rx_program = {
    .instructions = sdio_data_rx_program_instructions,
    .length = 6,
    .origin = -1,
    .pio_version = sdio_data_rx_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config sdio_data_rx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + sdio_data_rx_wrap_target, offset + sdio_data_rx_wrap);
    sm_config_set_in_pin_count(&c, 32);
    sm_config_set_in_shift(&c, 0, 1, 32);
    sm_config_set_out_pin_count(&c, 4);
    sm_config_set_out_shift(&c, 0, 1, 32);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}
#endif

// --------------- //
// sdio_data_rx_hs //
// --------------- //

#define sdio_data_rx_hs_wrap_target 0
#define sdio_data_rx_hs_wrap 5
#define sdio_data_rx_hs_pio_version 0

static const uint16_t sdio_data_rx_hs_program_instructions[] = {
            //     .wrap_target
    0xa022, //  0: mov    x, y            side 0     
    0xb142, //  1: nop                    side 1 [1] 
    0x00c1, //  2: jmp    pin, 1          side 0     
    0xb142, //  3: nop                    side 1 [1] 
    0x4004, //  4: in     pins, 4         side 0     
    0x1144, //  5: jmp    x--, 4          side 1 [1] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program sdio_data_rx_hs_program = {
    .instructions = sdio_data_rx_hs_program_instructions,
    .length = 6,
    .origin = -1,
    .pio_version = sdio_data_rx_hs_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config sdio_data_rx_hs_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + sdio_data_rx_hs_wrap_target, offset + sdio_data_rx_hs_wrap);
    sm_config_set_in_pin_count(&c, 32);
    sm_config_set_in_shift(&c, 0, 1, 32);
    sm_config_set_out_pin_count(&c, 4);
    sm_config_set_out_shift(&c, 0, 1, 32);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}
#endif

// ------------------ //
// sdio_data_rx_hs_oc //
// ------------------ //

#define sdio_data_rx_hs_oc_wrap_target 0
#define sdio_data_rx_hs_oc_wrap 5
#define sdio_data_rx_hs_oc_pio_version 0

static const uint16_t sdio_data_rx_hs_oc_program_instructions[] = {
            //     .wrap_target
    0xb022, //  0: mov    x, y            side 1     
    0xa042, //  1: nop                    side 0     
    0x10c1, //  2: jmp    pin, 1          side 1     
    0xa042, //  3: nop                    side 0     
    0x5004, //  4: in     pins, 4         side 1     
    0x0044, //  5: jmp    x--, 4          side 0     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program sdio_data_rx_hs_oc_program = {
    .instructions = sdio_data_rx_hs_oc_program_instructions,
    .length = 6,
    .origin = -1,
    .pio_version = sdio_data_rx_hs_oc_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config sdio_data_rx_hs_oc_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + sdio_data_rx_hs_oc_wrap_target, offset + sdio_data_rx_hs_oc_wrap);
    sm_config_set_in_pin_count(&c, 32);
    sm_config_set_in_shift(&c, 0, 1, 32);
    sm_config_set_out_pin_count(&c, 4);
    sm_config_set_out_shift(&c, 0, 1, 32);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}
#endif

// ------------ //
// sdio_data_tx //
// ------------ //

#define sdio_data_tx_wrap_target 0
#define sdio_data_tx_wrap 7
#define sdio_data_tx_pio_version 0

static const uint16_t sdio_data_tx_program_instructions[] = {
            //     .wrap_target
    0x6204, //  0: out    pins, 4         side 0 [2] 
    0x1240, //  1: jmp    x--, 0          side 1 [2] 
    0xe280, //  2: set    pindirs, 0      side 0 [2] 
    0x5201, //  3: in     pins, 1         side 1 [2] 
    0x0283, //  4: jmp    y--, 3          side 0 [2] 
    0x12c7, //  5: jmp    pin, 7          side 1 [2] 
    0x0205, //  6: jmp    5               side 0 [2] 
    0x8220, //  7: push   block           side 0 [2] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program sdio_data_tx_program = {
    .instructions = sdio_data_tx_program_instructions,
    .length = 8,
    .origin = -1,
    .pio_version = sdio_data_tx_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config sdio_data_tx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + sdio_data_tx_wrap_target, offset + sdio_data_tx_wrap);
    sm_config_set_in_pin_count(&c, 32);
    sm_config_set_in_shift(&c, 0, 0, 32);
    sm_config_set_out_pin_count(&c, 4);
    sm_config_set_out_shift(&c, 0, 1, 32);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}
#endif

// --------------- //
// sdio_data_tx_hs //
// --------------- //

#define sdio_data_tx_hs_wrap_target 0
#define sdio_data_tx_hs_wrap 8
#define sdio_data_tx_hs_pio_version 0

static const uint16_t sdio_data_tx_hs_program_instructions[] = {
            //     .wrap_target
    0x6104, //  0: out    pins, 4         side 0 [1] 
    0x1040, //  1: jmp    x--, 0          side 1     
    0xe080, //  2: set    pindirs, 0      side 0     
    0xb142, //  3: nop                    side 1 [1] 
    0x4001, //  4: in     pins, 1         side 0     
    0x1184, //  5: jmp    y--, 4          side 1 [1] 
    0x00c8, //  6: jmp    pin, 8          side 0     
    0x1106, //  7: jmp    6               side 1 [1] 
    0x8020, //  8: push   block           side 0     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program sdio_data_tx_hs_program = {
    .instructions = sdio_data_tx_hs_program_instructions,
    .length = 9,
    .origin = -1,
    .pio_version = sdio_data_tx_hs_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config sdio_data_tx_hs_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + sdio_data_tx_hs_wrap_target, offset + sdio_data_tx_hs_wrap);
    sm_config_set_in_pin_count(&c, 32);
    sm_config_set_in_shift(&c, 0, 0, 32);
    sm_config_set_out_pin_count(&c, 4);
    sm_config_set_out_shift(&c, 0, 1, 32);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}
#endif

